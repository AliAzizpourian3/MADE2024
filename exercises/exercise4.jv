pipeline WeatherProcessingPipeline
{
    ExtractWeatherData-> InterpretWeatherArchive;

      InterpretWeatherArchive  -> SelectWeatherFile
        ->WeatherTextFileInterpreter
        -> ParseWeatherCSV
        -> RemoveWeatherColumns
        -> RemoveWeatherRows
        -> SelectWeatherCells
        -> RenameColumns
        -> TransformTemperature
        -> TransformBatteryTemperature
        -> LoadWeatherData;

    block ExtractWeatherData oftype HttpExtractor 
    {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    } 

    block InterpretWeatherArchive oftype ArchiveInterpreter 
    {
        archiveType: "zip";
    }


    block SelectWeatherFile oftype FilePicker      
    {
        // Specify the download path for the file.
        path: "/data.csv";
    }
        block WeatherTextFileInterpreter oftype TextFileInterpreter { encoding: "utf8";}
    block ParseWeatherCSV oftype CSVInterpreter 
    {
        delimiter: ";";
    }

    block RemoveWeatherColumns oftype ColumnDeleter
    {
        delete: [column F, column G, column H, column I];
    }

    block RemoveWeatherRows oftype RowDeleter 
    {
        delete: [row 1];
    }

    block SelectWeatherCells oftype CellRangeSelector   
    {
        select: range A1:J*;
    }

    block RenameColumns oftype TableInterpreter
    {
        header : false;
        columns : [
            "id" oftype positiveInt,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    block TransformTemperature oftype TableTransformer 
    {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block TransformBatteryTemperature oftype TableTransformer 
    {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    transform CelsiusToFahrenheit 
    {
        from tempC oftype decimal;
        to tempF oftype decimal;
        tempF: (tempC * 9/5) + 32;
    }

    // Ensure positive IDs
    valuetype positiveInt oftype integer
    {
        constraints: [ensurePositiveInt];
    }
    constraint ensurePositiveInt on integer:
        value > 0;

    block LoadWeatherData oftype SQLiteLoader 
    {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}
