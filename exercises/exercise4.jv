pipeline TempPipeline {

    DataZipDownloader 
        -> ZipInterpreter 
        -> CsvSelector
        -> TextFileReader
        -> CsvReader 
        -> ColumnFilter 
        -> HeaderRenamer 
        -> TempTableInterpreter
        -> TempTransformer
        -> BatteryTempTransformer
        -> TempDataLoader;

    block DataZipDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block CsvSelector oftype FilePicker {
        path: "./data.csv";
    }

    block TextFileReader oftype TextFileInterpreter {}

    block CsvReader oftype CSVInterpreter {
        delimiter: ";";
    }

    block ColumnFilter oftype ColumnDeleter {
        delete: [column G, column H, column I, column J];
    }

    block HeaderRenamer oftype CellWriter {
        at: range A1:F1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block TempTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype ValidId,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype ValidMonth,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    block TempTransformer oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: CelsiusToFahrenheitConversion;
    }

    block BatteryTempTransformer oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        uses: CelsiusToFahrenheitConversion;
    }

    block TempDataLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    transform CelsiusToFahrenheitConversion {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
    }

    valuetype ValidId oftype integer {
        constraints: [IdPositive];
    }

    constraint IdPositive oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: false;
    }

    valuetype ValidMonth oftype integer {
        constraints: [ValidMonthConstraint];
    }

    constraint ValidMonthConstraint oftype RangeConstraint {
        lowerBound: 1;
        upperBound: 12;
    }
}
